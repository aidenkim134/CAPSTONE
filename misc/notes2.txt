In terms of program implementation, similar to any machines, 
the machine must calibrated to its environment. 

So, in our simulated setup, the machine initially go around the boundaries to measure the boundary
limits, and to sort of log in the data cordinates for the four corners. 

And how is this done, because we have the wheel positions measured using encoders, its a matter of 
incorporating our kinematic equation to determine the current position of our machine. 

So once the machine reaches a corner, it will log its current position and it will 
repeat this four times and we would have coordinates of our four corners. 

'''''''''''''''''''''''''''''''''''''''''''''''Next slide

Once the machine is calibrated to its environment, it would be time to do some work
with it, like moving boxes around in the manufacturer facility. 
To do so, we would first need to detect the objects, different colored balls in our case using our camera. 

So, to detect the object, we incorporated three different techniques. 
First is the color filter to omit any unnecesary colors, so we would have a limit in rgb scale for blue and red balland disregard any pixels that do not fall into this range.
Next, on the filtered data, we find the edges of the image using Canny edge detection, which involves determining the edge points by calculating
the gradient between the pixels and refining them,
And lastly, since we have the edge points, it is a matter of determining whether or not these edge points make up a circle.
We do this by using a method called hough trasnformation
In its simple form, since we know the equation of a circle, if we evaluate different circles along the edges
there should be a point where poitns of these circles repeat, and that can be considered the centre of the ball that we are looking for. 

As you can from picture on the right, that it generally works quite well for our application.


''''''''''''''''''''''''''''''''''

Once the machine recieves its predefined commands from detecting the object, we need to move the actuator for it to do the work. 
So, like we mentioned in the previous presentation, we defined the transfer function that depends on many different factors such as armature resistance,
back emf constant, friction coefficient, etc. and we obtained it from our motor response.

'''''''''''''''''

Then, we applied PID Tuning using Zielger Nichols method and obtained the control parameters for our PID controllers as follows.
''''''''''''''''''''''''''''''''''''''''''

Then, we verified the model using simulink to convince ourselves that it is adequate to be used in the real product. 
We decided that less than 25 percent overshoot is what we are aiming, which is what you can see in this graph
and that limit is generally used in many motored applications.

'''''''''''''''''''''''''''''''''''''''''''

Now, let's test it on a real system,we set the setpoint speed as 30 rpm, as you can see from the graph on top left that 
there is quite a bit of occilation and overshooting. Of course this was slightly expected as the control parameters were based on an idealized model.
So then, we generated a root locus plot which describes percent overshoot, rise time, peak time, and things like that.
And based on this, we said, if we increased Kp gain slightly, we can reduce quite a bit of overshooting, and adjust Ki gain accordingly.
Now, using the modified control gains, we can clearly see the improvements in the motor response. Of course, seems to operate much more smoother and 
certainly much less overshooting with less than 25% overshoot which was what we were aiming for. 


'''''''''''''''''
Like I mentioned in the program implementation slides,
Once we place the robot, it will go around the boundaries to keep track of its determine its relative postion.
Then, it would scan its surroundings to see and find the balls that that may need to transport. 
Once it gets to the ball, we simply grab the ball and transport it to its respective inventory. 
And once that's done it'll just do its scanning again and repeat the process.